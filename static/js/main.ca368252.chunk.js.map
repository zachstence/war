{"version":3,"sources":["Deck/Deck.ts","components/Card/Card.tsx","components/Game/Game.tsx","components/App.tsx","index.tsx"],"names":["SUITS","RANKS","Deck","cards","this","init","suit","rank","push","card","shift","Error","i","length","j","Math","floor","random","half1","slice","half2","suitToChar","rankToChar","toString","Card","faceUp","className","Game","useState","p1Deck","setP1Deck","p1Played","setP1Played","p2Deck","setP2Deck","p2Played","setP2Played","isWar","setIsWar","canPlay","setCanPlay","gameOver","setGameOver","fullDeck","shuffle","split","d1","d2","useEffect","renderCards","played","map","size","onClick","draw","p1Card","p2Card","pushBottom","App","href","src","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca368252.chunk.js","sourcesContent":["const SUITS = ['spades', 'hearts', 'diamonds', 'clubs'] as const;\nexport type Suit = (typeof SUITS)[number];\n\nconst RANKS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] as const;\nexport type Rank =  (typeof RANKS)[number];\n\n/**\n * A representation of a standard playing card with a suit (Spades, Hearts, Diamonds, or Clubs),\n * and a rank (A, 2-10, J, Q, or K).\n */\nexport interface CardInfo {\n    suit: Suit;\n    rank: Rank;\n}\n\n/**\n * A deck of a subset of 52 playing cards. Cards can be drawn from the top and added back to the bottom of the deck.\n */\nclass Deck {\n    private cards: CardInfo[] = [];\n\n    /**\n     * Create a new deck. If cards are specified, they are used in the deck. If not, the deck is initialized\n     * with the standard 52 playing cards in order.\n     * @param cards The (optional) cards to initialize the deck with.\n     */\n    constructor(cards?: CardInfo[]) {\n        if (cards) {\n            this.cards = cards;\n        } else {\n            this.init();\n        }\n    }\n\n    /**\n     * Initializes the deck with one of each of the standard 52 playing cards.\n     */\n    private init(): void {\n        for (const suit of SUITS) {\n            for (const rank of RANKS) {\n                this.cards.push({suit, rank});\n            }\n        }\n    }\n\n    /**\n     * Removes and returns the card on top of the deck.\n     * @returns The card that was drawn.\n     */\n    draw(): CardInfo {\n        const card = this.cards.shift();\n        if (!card) throw new Error(); // TODO write helpful error message\n        return card;\n    }\n\n    /**\n     * Adds cards to the bottom of the deck.\n     * @param cards The cards to add to the bottom of the deck.\n     */\n    pushBottom(...cards: CardInfo[]): void {\n        this.cards.push(...cards);\n    }\n\n    /**\n     * Shuffles the deck using a modernized version of the Fisher-Yates algorithm.\n     * https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n     */\n    shuffle(): void {\n        for (let i = this.cards.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [this.cards[i], this.cards[j]] = [this.cards[j], this.cards[i]];\n        }\n    }\n\n    /**\n     * Splits the deck evenly into two halves. If the deck contains an odd number of cards,\n     * the second half will contain one more card than the first half.\n     * @returns A 2-element array containing the two halves of the deck.\n     */\n    split(): [Deck, Deck] {\n        const half1 = this.cards.slice(0, (this.cards.length) / 2);\n        const half2 = this.cards.slice(this.cards.length / 2, this.cards.length);\n        return [\n            new Deck(half1),\n            new Deck(half2)\n        ];\n    }\n\n    /**\n     * Gets the cards in the deck.\n     * @returns The cards in the deck.\n     */\n    getCards(): CardInfo[] {\n        return this.cards;\n    }\n\n    /**\n     * The number of cards in the deck.\n     * @returns the number of cards in the deck.\n     */\n    size(): number {\n        return this.cards.length;\n    }\n}\n\nexport default Deck;","import React from \"react\";\nimport \"./Card.scss\";\nimport { CardInfo, Rank, Suit } from \"../../Deck/Deck\";\n\n/**\n * Converts a Suit to a character to show on a card.\n * @param suit The suit to convert to a character.\n * @returns An ASCII character representation of the given suit.\n */\nconst suitToChar = (suit: Suit): string => {\n    switch (suit) {\n        case \"spades\": return \"♠\";\n        case \"hearts\": return \"♥\";\n        case \"diamonds\": return \"♦\";\n        case \"clubs\": return \"♣\";\n    }\n}\n\n/**\n * Converts a Rank to a character to show on a card.\n * 1 becomes A, 2-10 are unchanged, 11 becomes J, 12 becomes Q, and 13 becomes K.\n * @param rank The rank to convert to a character.\n * @returns  An ASCII character representation of the given rank.\n */\nconst rankToChar = (rank: Rank): string => {\n    switch (rank) {\n        case 1:\n            return \"A\";\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 8:\n        case 9:\n        case 10:\n            return rank.toString();\n        case 11:\n            return \"J\";\n        case 12:\n            return \"Q\";\n        case 13:\n            return \"K\";\n    }\n}\n\nexport interface CardProps extends CardInfo {\n    faceUp: boolean;\n}\n\n/**\n * Renders a playing card with a given suit and rank. The suit and rank are not rendered\n * if faceUp=false.\n */\nconst Card: React.FC<CardProps> = ({rank, suit, faceUp}) => {\n    if (faceUp) {\n        return (\n            <div className=\"card\">\n                {rankToChar(rank)}{suitToChar(suit)}\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"card face-down\" />\n        )\n    }\n};\n\nexport default Card;","import React, { ReactElement, useEffect, useState } from \"react\";\nimport Deck from \"../../Deck/Deck\";\nimport Card, { CardProps } from \"../Card/Card\";\nimport \"./Game.scss\";\n\n/**\n * Renders a playable War game, where two players fight cards against each other.\n * Rules: https://bicyclecards.com/how-to-play/war/\n */\nconst Game: React.FC = () => {\n    const [p1Deck, setP1Deck] = useState<Deck>();\n    const [p1Played, setP1Played] = useState<CardProps[]>([]);\n\n    const [p2Deck, setP2Deck] = useState<Deck>();\n    const [p2Played, setP2Played] = useState<CardProps[]>([]);\n\n    const [isWar, setIsWar] = useState<boolean>(false);\n\n    const [canPlay, setCanPlay] = useState<boolean>(true);\n\n    const [gameOver, setGameOver] = useState<boolean>(true);\n\n    /**\n     * Sets up each player with half of a standard deck of playing cards.\n     */\n    const init = (): void => {\n        const fullDeck = new Deck();\n        fullDeck.shuffle();\n\n        const [d1, d2] = fullDeck.split();\n        setP1Deck(d1);\n        setP2Deck(d2);\n    }\n\n    // Initialize on component mount\n    useEffect(init, []);\n\n    /**\n     * Plays one card from each player, or plays 2 cards in the event of a \"war\".\n     */\n    const play = (): void => {\n        if (!p1Deck || !p2Deck) throw new Error(); // TODO\n\n        setCanPlay(false);\n\n        if (!isWar) { // If not war, each player draws and plays 1 card\n            setP1Played([{...p1Deck.draw(), faceUp: true}]);\n            setP2Played([{...p2Deck.draw(), faceUp: true}]);\n        } else { // If war, each player draws and plays a face down card, then a face up card\n            if (!p1Played || !p2Played) throw new Error();\n\n            setP1Played([\n                ...p1Played,\n                {...p1Deck.draw(), faceUp: false},\n                {...p1Deck.draw(), faceUp: true}\n            ]);\n            setP2Played([\n                ...p2Played,\n                {...p2Deck.draw(), faceUp: false},\n                {...p2Deck.draw(), faceUp: true}\n            ]);\n        }\n    };\n\n    /**\n     * Evaluates the cards played by each player and determines who wins the round, then resets\n     * the played cards so players can play another round.\n     * Ends the game if either player has 0 cards in their deck.\n     */\n    const evaluate = (): void => {\n        if (!p1Played || !p2Played || !p1Deck || !p2Deck) throw new Error(); // TODO\n\n        const p1Card = p1Played[p1Played.length - 1];\n        const p2Card = p2Played[p2Played.length - 1];\n\n        if (p1Card.rank === p2Card.rank) { // If ranks are equal, enter war state\n            setIsWar(true);\n        } else {\n            if (p1Card.rank > p2Card.rank) { // Player 1 wins this round\n                p1Deck.pushBottom(...p1Played, ...p2Played);\n            } else if (p2Card.rank > p1Card.rank) { // Player 2 wins this round\n                p2Deck.pushBottom(...p2Played, ...p1Played);\n            }\n\n            setP1Played([]);\n            setP2Played([]);\n            setIsWar(false);\n            \n            // TODO\n            if (p1Deck.size() === 0 || p2Deck.size() === 0) setGameOver(true);\n        }\n\n        setCanPlay(true);\n    };\n\n    /**\n     * Renders a player's played cards.\n     * @param played The props of cards to render.\n     */\n    const renderCards = (played: CardProps[]): ReactElement[] => {\n        return played.map(card => (\n            <Card key={`${card.rank}${card.suit}`} {...card} />\n        ));\n    }\n\n    if (p1Deck && p2Deck) {\n        return (\n            <main className={`game${isWar ? \" war\" : \"\"}`}>\n                <div className=\"player\">\n                    <h2>PLAYER 1</h2>\n                    <p>{p1Deck.size()} cards remaining</p>\n                    <div className=\"played-cards\">{renderCards(p1Played)}</div>\n                </div>\n                <div className=\"middle\">\n                    {canPlay\n                        ? <button onClick={play}>Play</button>\n                        : <button onClick={evaluate}>Evaluate</button>}\n                </div>\n                <div className=\"player\">\n                    <h2>PLAYER 2</h2>\n                    <p>{p2Deck.size()} cards remaining</p>\n                    <div className=\"played-cards\">{renderCards(p2Played)}</div>\n                </div>\n            </main>\n        )\n    } else if (gameOver) {\n        return (\n            <main className=\"game-over\">\n                <h2>Game Over</h2>\n                {p1Deck?.size() === 0 ? <h3>Player 2 Won!</h3> : <h3>Player 1 Won!</h3>}\n                <button onClick={init}>Play Again</button>\n            </main>\n        );\n    } else {\n        return null;\n    }\n\n};\n\nexport default Game;","import React from 'react';\nimport Game from './Game/Game';\n\nimport \"./App.scss\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <header><h1>WAR</h1></header>\n      <Game />\n      <footer>\n        <a href=\"https://github.com/zachstence/war\">\n          <img src=\"github.png\" alt=\"GitHub Icon\"/>\n        </a>\n      </footer>\n    </div>\n  )\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}